import os

# AES-128 parameters
Nb = 4  # Number of columns (32-bit words) in the state
Nk = 4  # Number of 32-bit words in the key (AES-128)
Nr = 10 # Number of rounds for AES-128

# S-box for SubBytes transformation
SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Inverse S-box for InvSubBytes transformation
INV_SBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Round constants for key expansion
RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def bytes_to_matrix(b):
    return [list(b[i:i+4]) for i in range(0, len(b), 4)]

def matrix_to_bytes(matrix):
    return bytes(sum(matrix, []))

def add_round_key(state, round_key):
    return [[s ^ k for s, k in zip(sr, kr)] for sr, kr in zip(state, round_key)]

def sub_word(word):
    return [SBOX[b] for b in word]

def rot_word(word):
    return word[1:] + word[:1]

def key_expansion(key):
    key_words = [list(key[i:i+4]) for i in range(0, len(key), 4)]
    i = Nk
    while len(key_words) < Nb * (Nr + 1):
        word = key_words[-1][:]
        if i % Nk == 0:
            word = sub_word(rot_word(word))
            word[0] ^= RCON[i // Nk - 1]
        word = [w ^ k for w, k in zip(word, key_words[-Nk])]
        key_words.append(word)
        i += 1
    round_keys = []
    for r in range(Nr + 1):
        round_key = key_words[r*Nb:(r+1)*Nb]
        round_keys.append(round_key)
    return round_keys

def gf_multiply(a, b):
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        hi_bit = a & 0x80
        a = (a << 1) & 0xFF
        if hi_bit:
            a ^= 0x1b
        b >>= 1
    return p

def mix_columns(state):
    def mix_single_column(col):
        return [
            gf_multiply(col[0], 2) ^ gf_multiply(col[1], 3) ^ col[2] ^ col[3],
            col[0] ^ gf_multiply(col[1], 2) ^ gf_multiply(col[2], 3) ^ col[3],
            col[0] ^ col[1] ^ gf_multiply(col[2], 2) ^ gf_multiply(col[3], 3),
            gf_multiply(col[0], 3) ^ col[1] ^ col[2] ^ gf_multiply(col[3], 2)
        ]
    return [mix_single_column(list(col)) for col in zip(*state)]

def inv_mix_columns(state):
    def inv_mix_column(col):
        return [
            gf_multiply(col[0], 0x0e) ^ gf_multiply(col[1], 0x0b) ^ gf_multiply(col[2], 0x0d) ^ gf_multiply(col[3], 0x09),
            gf_multiply(col[0], 0x09) ^ gf_multiply(col[1], 0x0e) ^ gf_multiply(col[2], 0x0b) ^ gf_multiply(col[3], 0x0d),
            gf_multiply(col[0], 0x0d) ^ gf_multiply(col[1], 0x09) ^ gf_multiply(col[2], 0x0e) ^ gf_multiply(col[3], 0x0b),
            gf_multiply(col[0], 0x0b) ^ gf_multiply(col[1], 0x0d) ^ gf_multiply(col[2], 0x09) ^ gf_multiply(col[3], 0x0e)
        ]
    return [inv_mix_column(list(col)) for col in zip(*state)]

def sub_bytes(state):
    return [[SBOX[b] for b in row] for row in state]

def inv_sub_bytes(state):
    return [[INV_SBOX[b] for b in row] for row in state]

def shift_rows(state):
    return [
        state[0],
        state[1][1:] + state[1][:1],
        state[2][2:] + state[2][:2],
        state[3][3:] + state[3][:3]
    ]

def inv_shift_rows(state):
    return [
        state[0],
        state[1][-1:] + state[1][:-1],
        state[2][-2:] + state[2][:-2],
        state[3][-3:] + state[3][:-3]
    ]

def encrypt_block(plaintext, key_schedule):
    state = bytes_to_matrix(plaintext)
    state = add_round_key(state, key_schedule[0])
    for rnd in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, key_schedule[rnd])
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, key_schedule[Nr])
    return matrix_to_bytes(state)

def decrypt_block(ciphertext, key_schedule):
    if len(ciphertext) != 16:
        raise ValueError("Ciphertext block must be 16 bytes")
    state = bytes_to_matrix(ciphertext)
    state = add_round_key(state, key_schedule[Nr])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    for rnd in range(Nr - 1, 0, -1):
        state = add_round_key(state, key_schedule[rnd])
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
    state = add_round_key(state, key_schedule[0])
    return matrix_to_bytes(state)

def pad(plaintext):
    pad_len = 16 - (len(plaintext) % 16)
    padded = plaintext + bytes([pad_len] * pad_len)
    return padded

def unpad(plaintext):
    if not plaintext:
        raise ValueError("Cannot unpad empty plaintext")
    pad_len = plaintext[-1]
    if not (1 <= pad_len <= 16) or not all(b == pad_len for b in plaintext[-pad_len:]):
        raise ValueError("Invalid padding")
    return plaintext[:-pad_len]

def encrypt_aes128(key, iv, plaintext):
    if len(key) != 16 or len(iv) != 16:
        raise ValueError("Key and IV must be 16 bytes")
    plaintext = pad(plaintext)
    key_schedule = key_expansion(key)
    blocks = [plaintext[i:i+16] for i in range(0, len(plaintext), 16)]
    encrypted = b""
    prev = iv
    for block in blocks:
        xor_block = bytes(a ^ b for a, b in zip(block, prev))
        encrypted_block = encrypt_block(xor_block, key_schedule)
        encrypted += encrypted_block
        prev = encrypted_block
    return encrypted

def decrypt_aes128(key, iv, ciphertext):
    if len(key) != 16 or len(iv) != 16:
        raise ValueError("Key and IV must be 16 bytes")
    try:
        if len(ciphertext) % 16 != 0:
            raise ValueError(f"Ciphertext length ({len(ciphertext)}) must be a multiple of 16 bytes")
        key_schedule = key_expansion(key)
        blocks = [ciphertext[i:i+16] for i in range(0, len(ciphertext), 16)]
        decrypted = b""
        prev = iv
        for i, block in enumerate(blocks):
            decrypted_block = decrypt_block(block, key_schedule)
            plain_block = bytes(a ^ b for a, b in zip(decrypted_block, prev))
            decrypted += plain_block
            prev = block
        return unpad(decrypted)
    except Exception as e:
        print(f"[AES] Decryption error: {e}, ciphertext: {ciphertext.hex()}")
        return b""